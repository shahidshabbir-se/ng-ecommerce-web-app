generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String    @unique
  password     String?
  addresses    Address[]
  orders       Order[]
  salt         String
  profileImage String?
  googleId     String?
  cart         Cart?
  wishlist     Wishlist?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Cart {
  cartId    Int           @id @default(autoincrement())
  userId    Int           @unique
  user      User          @relation(fields: [userId], references: [userId])
  cartItems CartProduct[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CartProduct {
  cartProductId    Int      @id @default(autoincrement())
  cartId           Int
  cart             Cart     @relation(fields: [cartId], references: [cartId])
  variantId        Int
  size             String
  quantity         Int
  Product          Product @relation(fields: [productId], references: [productId])
  productId        Int

  @@unique([cartId, productId, variantId, size])
}


model Product {
  productId          Int              @id @default(autoincrement())
  productName        String
  productDescription String
  productCare        String
  categoryId         Int
  productVariants    ProductVariant[]
  reviews            Review[]
  brandId            Int
  brand              Brand            @relation("brandIdToProduct", fields: [brandId], references: [brandId])
  averageRating      Float?
  soldCount          Int?
  regPrice           Float
  salePrice          Float?
  orders             Order[]
  
  productCategory    Category         @relation(fields: [categoryId], references: [categoryId])
  cartProducts       CartProduct[] // Relationship to cart products
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  wishlistId         Int?
  wishlist           Wishlist?        @relation(fields: [wishlistId], references: [wishlistId])
  couponId           Int?
  coupon             Coupon?          @relation(fields: [couponId], references: [couponId])
}

model ProductVariant {
  variantId    Int      @id @default(autoincrement())
  productId    Int
  product      Product? @relation(fields: [productId], references: [productId])
  variantName  String
  images       String[]
  stock        Int
  color        String
  size         String[]

  @@unique([productId, variantName, color, size])
}

model Review {
  reviewId  Int      @id @default(autoincrement())
  productId Int?
  userId    Int
  rating    Float
  product   Product? @relation(fields: [productId], references: [productId])
  comment   String
  createdAt DateTime @default(now())

  @@unique([productId, userId])
}

model Category {
  categoryId          Int        @id @default(autoincrement())
  categoryName        String
  categoryDescription String?
  parentId            Int?
  parent              Category?  @relation("categoryIdToParentId", fields: [parentId], references: [categoryId])
  children            Category[] @relation("categoryIdToParentId")
  products            Product[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model Brand {
  brandId          Int       @id @default(autoincrement())
  brandName        String
  brandDescription String?
  brandImage       String?
  products         Product[] @relation("brandIdToProduct")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Address {
  addressId    Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [userId])
  addressLine  String
  city         String
  state        String
  postalCode   Int
  orderAddress Order[]
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model OrderProduct {
  orderProductId Int      @id @default(autoincrement())
  productId      Int
  variantId      Int
  size           String
  quantity       Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Order          Order[]
}

model Order {
  orderId     Int       @id @default(autoincrement())
  userId      Int
  products    OrderProduct[]
  orderTotal  Float
  user        User      @relation(fields: [userId], references: [userId])
  orderStatus String
  address     Address   @relation(fields: [addressId], references: [addressId])
  addressId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]
}

model Wishlist {
  wishlistId Int       @id @default(autoincrement())
  userId     Int       @unique
  user       User      @relation(fields: [userId], references: [userId])
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Coupon {
  couponId   Int       @id @default(autoincrement())
  couponCode String    @unique
  discount   Float
  products   Product[]
  expiryDate DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
